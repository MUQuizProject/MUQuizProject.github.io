<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on MU Quiz Project</title>
    <link>http://muquizproject.github.io/tags/python/</link>
    <description>Recent content in Python on MU Quiz Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Tue, 22 Mar 2016 03:21:59 +0900</lastBuildDate>
    
	<atom:link href="http://muquizproject.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TeXを利用してネームプレートを作成する方法について(2): 当日のプレート作成</title>
      <link>http://muquizproject.github.io/tech/python_nameplate/</link>
      <pubDate>Tue, 22 Mar 2016 03:21:59 +0900</pubDate>
      
      <guid>http://muquizproject.github.io/tech/python_nameplate/</guid>
      <description>前回からのブリッジ （意気揚々と文章を書こうと思っていたら，今年のネームプレートで&amp;rdquo;13th&amp;rdquo;を&amp;rdquo;13rd&amp;rdquo;と書くという凡ミスをしてしまったことが判明して少し凹んでるのですが，書くべきことは書こうということで．）
前回は，TeXを利用してネームプレートの雛形を作るという話をしました． ここでは，当日どのようにしてネームプレートが作成されるかについて説明します． とくに，pythonやrubyなどのスクリプト言語とテンプレートエンジンを利用した「差し込み印刷用スクリプト」について触れていきたいと思います．
ネームプレートの作成方法について 大会前から当日までのネームプレートに関する流れについて簡単に述べましょう．
 （資材準備会にて）各画用紙に順位面だけを貼り付けておく．名前の面は当日貼り付ける． （ここから当日）マークシートの読取と集計を行う．（ここは私の管轄外で，私は結果のデータをもらうだけです．） 結果のデータを元にして，ネームプレートの名前面の作成を行う． 名前面のpdfをUSBメモリに入れ，コンビニ印刷にて印刷する． できあがった名前面を，（既に順位面だけ貼り付けてある）画用紙に貼り付けて完成．  このうち，3番目の作業がメインになります．前回提示したTeXソースの中では，
\AssignName{&amp;lt;順位&amp;gt;}{&amp;lt;名前&amp;gt;}{&amp;lt;学校&amp;gt;}{&amp;lt;学年&amp;gt;}  という命令で名前面の割付をするのですが， これを60人分手打ちするのはどう考えても時間が足りないわけです． ですから，これを自動化する「差し込み印刷スクリプト」が必要になります．
テンプレートエンジンTenjinを利用した差し込み印刷スクリプト どういうことがやりたいかと言うと，例えば，
11111,西園寺公望,東京大,大3,1,さいおんじきんもち,140 22222,桂太郎,京都大,大4,2,かつらたろう,139  という感じのcsvファイル（左から，エントリーNo.，名前，学校，学年，順位，名前読み，点数）から，
\AssignName{1}{西園寺公望}{東京大}{大3} \AssignName{2}{桂太郎}{京都大}{大4}  という感じの内容のTeXソースファイルを生成したいわけです． これをやるためのスクリプトなのですが，今回はテンプレートエンジンの一つであるTenjinを利用しました． Tenjinはいくつかの言語で実装されていて， 今回はpython版（pyTenjin）を利用することとしました．
今回は以下のテンプレートファイルとpythonスクリプトを用意しました． 
まずテンプレートファイル（nameplate.pytex）について説明します． このファイルは前回のサンプルをベースにしており， Tenjinのテンプレートとしての本質的な部分は以下の部分に集約されます．
&amp;lt;?py for member in members: ?&amp;gt; \AssignName{${member[&#39;order&#39;]}}{${member[&#39;name&#39;]}}{${member[&#39;school&#39;]}}{${member[&#39;grade&#39;]}} &amp;lt;?py #endfor ?&amp;gt; \end{document}  pyTenjinでは，${...}や&amp;lt;?py ... ?&amp;gt;で囲むことでテンプレート内にpythonのステートメントを導入することができます．（ただし，上のようにfor文を導入する際は，pythonではインデントでブロックを認識するのが基本なので，どこでforブロックが終わるのか識別させるために，&amp;lt;?py #endfor ?&amp;gt;という書き方をします．pyTenjinのマニュアルを参照してください．）
membersは辞書の配列で，そこから一つずつ辞書を取り出して，\AssignNameの引数として挿入していきます．極めて単純明快なものです．
このテンプレートの変数membersにデータをバインドさせて，実際に文書を作るのがinsert.pyになります．一部を抜き出します．
memberlist = [] with open(&#39;dat/result.csv&#39;,&#39;r&#39;) as f: reader = csv.reader(f) for row in reader: mem = { &#39;order&#39;: row[4], &#39;name&#39;: row[1], &#39;school&#39;: row[2], &#39;grade&#39;: row[3], } memberlist.</description>
    </item>
    
  </channel>
</rss>